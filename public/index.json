[{"content":" Heyyo This section contains whatever I think is useful when I do computer stuff.\n","date":null,"permalink":"/posts/","section":"Blog posts","summary":"","title":"Blog posts"},{"content":"","date":null,"permalink":"/tags/flux/","section":"Tags","summary":"","title":"Flux"},{"content":"","date":null,"permalink":"/tags/k8s/","section":"Tags","summary":"","title":"K8s"},{"content":"","date":null,"permalink":"/tags/kind/","section":"Tags","summary":"","title":"Kind"},{"content":"Setting up a local registry for Kind clusters requires settings to be applied when creating the cluster. It should work to just run the script provided in the Kind docs.\nHowever, I also need it to work with Flux which did not work out of the box. Therefore, I\u0026rsquo;ve modified the script from the Kind docs to work with Flux. Honestly, I don\u0026rsquo;t remember exactly why, but it is in step 2 and it is related to the FQDN used by the cluster to access the registry.\nHere is the script:\n#!/bin/sh # from https://kind.sigs.k8s.io/docs/user/local-registry/ set -o errexit # 1. Create registry container unless it already exists reg_name=\u0026#39;kind-registry\u0026#39; reg_port=\u0026#39;5001\u0026#39; if [ \u0026#34;$(docker inspect -f \u0026#39;{{.State.Running}}\u0026#39; \u0026#34;${reg_name}\u0026#34; 2\u0026gt;/dev/null || true)\u0026#34; != \u0026#39;true\u0026#39; ]; then docker run \\ -d --restart=always -p \u0026#34;127.0.0.1:${reg_port}:5000\u0026#34; --network bridge --name \u0026#34;${reg_name}\u0026#34; \\ registry:2 fi # 2. Create kind cluster with containerd registry config dir enabled # TODO: kind will eventually enable this by default and this patch will # be unnecessary. # # See: # https://github.com/kubernetes-sigs/kind/issues/2875 # https://github.com/containerd/containerd/blob/main/docs/cri/config.md#registry-configuration # See: https://github.com/containerd/containerd/blob/main/docs/hosts.md # # Original: # [plugins.\u0026#34;io.containerd.grpc.v1.cri\u0026#34;.registry] # config_path = \u0026#34;/etc/containerd/certs.d\u0026#34; # # Ingress config (for DefectDojo app): # https://kind.sigs.k8s.io/docs/user/ingress/#create-cluster cat \u0026lt;\u0026lt;EOF | kind create cluster --config=- kind: Cluster apiVersion: kind.x-k8s.io/v1alpha4 containerdConfigPatches: - |- [plugins.\u0026#34;io.containerd.grpc.v1.cri\u0026#34;.registry] [plugins.\u0026#34;io.containerd.grpc.v1.cri\u0026#34;.registry.mirrors] [plugins.\u0026#34;io.containerd.grpc.v1.cri\u0026#34;.registry.mirrors.\u0026#34;kind-registry:5000\u0026#34;] endpoint = [\u0026#34;http://kind-registry:5000\u0026#34;] nodes: - role: control-plane kubeadmConfigPatches: - | kind: InitConfiguration nodeRegistration: kubeletExtraArgs: node-labels: \u0026#34;ingress-ready=true\u0026#34; extraPortMappings: - containerPort: 80 hostPort: 80 protocol: TCP - containerPort: 443 hostPort: 443 protocol: TCP EOF # 3. Add the registry config to the nodes # # This is necessary because localhost resolves to loopback addresses that are # network-namespace local. # In other words: localhost in the container is not localhost on the host. # # We want a consistent name that works from both ends, so we tell containerd to # alias localhost:${reg_port} to the registry container when pulling images REGISTRY_DIR=\u0026#34;/etc/containerd/certs.d/localhost:${reg_port}\u0026#34; for node in $(kind get nodes); do docker exec \u0026#34;${node}\u0026#34; mkdir -p \u0026#34;${REGISTRY_DIR}\u0026#34; cat \u0026lt;\u0026lt;EOF | docker exec -i \u0026#34;${node}\u0026#34; cp /dev/stdin \u0026#34;${REGISTRY_DIR}/hosts.toml\u0026#34; [host.\u0026#34;http://${reg_name}:5000\u0026#34;] EOF done # 4. Connect the registry to the cluster network if not already connected # This allows kind to bootstrap the network but ensures they\u0026#39;re on the same network if [ \u0026#34;$(docker inspect -f=\u0026#39;{{json .NetworkSettings.Networks.kind}}\u0026#39; \u0026#34;${reg_name}\u0026#34;)\u0026#34; = \u0026#39;null\u0026#39; ]; then docker network connect \u0026#34;kind\u0026#34; \u0026#34;${reg_name}\u0026#34; fi # 5. Document the local registry # https://github.com/kubernetes/enhancements/tree/master/keps/sig-cluster-lifecycle/generic/1755-communicating-a-local-registry cat \u0026lt;\u0026lt;EOF | kubectl apply -f - apiVersion: v1 kind: ConfigMap metadata: name: local-registry-hosting namespace: kube-public data: localRegistryHosting.v1: | host: \u0026#34;localhost:${reg_port}\u0026#34; help: \u0026#34;https://kind.sigs.k8s.io/docs/user/local-registry/\u0026#34; EOF ","date":null,"permalink":"/posts/kubernetes/","section":"Blog posts","summary":"A script to set up a local registry in Kind, with containerd patches to make it work for Flux","title":"Kind Cluster with Local Registry"},{"content":"","date":null,"permalink":"/tags/local-registry/","section":"Tags","summary":"","title":"Local Registry"},{"content":"","date":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags"},{"content":" Blip blop I realized I need to put my final notes somewhere, because when I go back, I don\u0026rsquo;t remember how finished they really are. If I put them publicly, they have to be done^_^\nThis is a demo of the page layout. Switch layout \u0026orarr; ","date":null,"permalink":"/","section":"Welcome to my notes! ðŸŽ‰","summary":"","title":"Welcome to my notes! ðŸŽ‰"},{"content":" Setup cluster with local registry Run Flux Setup secrets Push to local registry Check contents of registry Cleanup Debugging Resources 1. Setup Kind cluster with local registry #Find the script in the post Kind Cluster with Local Registry\ncd ~/git/flux-image-updates/clusters ./create-kind-cluster-with-registry.sh 2. Run Flux #Following the Flux guide \u0026ldquo;Automate image updates to Git\u0026rdquo;, I setup everything as follows:\nStart by adding your GitHub credentials as environment variables. PAT token can be found at Settings\u0026gt; Developer Settings\u0026gt; Tokens (classic). It requires the repo scope.\nexport GITHUB_TOKEN=ghp_gCVsYEC... export GITHUB_USER=maritiren You can run this although you already have an existing GitHub repo for Flux (called flux-image-updates). This does not overwrite manifest files.\nflux bootstrap github \\ --components-extra=image-reflector-controller,image-automation-controller \\ --owner=$GITHUB_USER \\ --repository=flux-image-updates \\ --branch=main \\ --path=clusters/my-cluster \\ --read-write-key \\ --personal 3. Setup secrets #Add secret for flux-system and the namespace you use to fetch an image:\nâœ— k create secret docker-registry regcred --docker-server=\u0026#34;kind-registry:5000\u0026#34; --docker-username=myuser --docker-password=myuser -n my-api âœ— k create secret docker-registry regcred2 --docker-server=\u0026#34;kind-registry:5000\u0026#34; --docker-username=myuser --docker-password=myuser -n flux-system Watch image repository to see status\nwatch flux get image repository --all-namespaces And then reconcile the image repository\nflux reconcile image repository my-api -n my-api 4. Push image to local registry #docker tag 0ac97f5bbbb5 localhost:5001/my-api:1.0.0 docker push localhost:5001/my-api:1.0.0 podinfo: https://hub.docker.com/r/stefanprodan/podinfo\ndocker pull stefanprodan/podinfo 5. (optional) Check contents of registry #Flux should automatically deploy new images when they get a new tag (according to the tag policy). To verify what\u0026rsquo;s in the registry, you can curl it.\nâœ— curl -X GET http://localhost:5001/v2/_catalog {\u0026#34;repositories\u0026#34;:[\u0026#34;my-api\u0026#34;,\u0026#34;hello-app\u0026#34;,\u0026#34;podinfo\u0026#34;]} **strong text** âœ— curl -X GET http://localhost:5001/v2/podinfo/tags/list {\u0026#34;name\u0026#34;:\u0026#34;podinfo\u0026#34;,\u0026#34;tags\u0026#34;:[\u0026#34;5.0.7\u0026#34;,\u0026#34;5.0.3\u0026#34;,\u0026#34;5.0.5\u0026#34;,\u0026#34;5.0.0\u0026#34;,\u0026#34;5.0.4\u0026#34;,\u0026#34;5.0.6\u0026#34;]} Cleanup #From https://github.com/piyushjajoo/kind-with-local-registry-and-ingress/blob/master/destroy.sh\n#!/bin/sh set -o errexit # delete kind cluster echo \u0026#34;deleting kind cluster\u0026#34; kind delete cluster --name \u0026#34;kind-kind\u0026#34; # delete registry echo \u0026#34;deleting registry\u0026#34; docker rm -f $(docker ps -a | grep registry | awk -F \u0026#39; \u0026#39; \u0026#39;{print $1}\u0026#39;) Debugging # K8s can connect to local registry, but Flux can\u0026rsquo;t K8s can\u0026rsquo;t connect to local registry, but Flux can Completely recreate deployment K8s can connect to local registry, but Flux can\u0026rsquo;t # Solution: Use port 5000 in the Deployment manifest files and other places in K8s. Even thouhg the port of the registry is 5001. This was one of the first huge issues I got while setting this up. I used so many hours debugging this. I cannot provide a complete overview of the debugging as I didn\u0026rsquo;t take notes at that time. However, I remember what fixed access for Flux in the end.\nAt first, the problem was that it didn\u0026rsquo;t really connect to the local registry at all. At that point the error message was something like \u0026ldquo;Connection refused\u0026rdquo;, so I thought I was going towards the local registry but had some authentication problem. Turned out I wasn\u0026rsquo;t even sending requests to the registry. Sorry, I don\u0026rsquo;t have the answer to this case here, probably changed some ports or DNS name of some sorts.\nHaving the local registry receiving my requests, I started getting the error http: server gave HTTP response to HTTPS client.\nI tried a couple of things, on of them was to add credentials to the docker config file and restart dockerd. A simple mistake in the config was made, which in turn made dockerd go bananas. It restarted all the time, wouldn\u0026rsquo;t allow us to reset and we ended up allowing more restarts in order to roll back the changes. This didn\u0026rsquo;t solve anything either.\nThen in the end, it turned out the error was that we used port 5001, while Kubernetes was connecting to the registry using port 5000. In other words, the solution was to use port 5000 in the Deployment manifest files and otherwise in Kubernetes. We still aren\u0026rsquo;t quite sure why, but assume this is due to how we connected the registry container and the cluster using docker network connect. Otherwise, from the outside of the cluster, we reach the registry using localhost:5001. PRETTY DARN CONFUSING! Localhost here and localhost there, K8s DNS name here. Good luck understanding this!\nK8s can\u0026rsquo;t connect to local registry, but Flux can #There are many (or few - depending on how you see things) options on what could be wrong. Here are a couple of different things that might help with this issue:\nSolution: What worked for me was to change the containerd configs in the cluster startup script. Changing containerd configs # https://github.com/kubernetes-sigs/kind/issues/2604#issuecomment-1041314277 Remove the existing config line and add this instead, in the cluster startup script. This makes some parts of the Kind script unuseful (the part of setting containerd settings in each node). You might change this either in cluster-config.yaml or in the Kind startup script.\ncontainerdConfigPatches: - |- [plugins.\u0026#34;io.containerd.grpc.v1.cri\u0026#34;.registry] [plugins.\u0026#34;io.containerd.grpc.v1.cri\u0026#34;.registry.mirrors] [plugins.\u0026#34;io.containerd.grpc.v1.cri\u0026#34;.registry.mirrors.\u0026#34;kind-registry:5000\u0026#34;] endpoint = [\u0026#34;http://kind-registry:5000\u0026#34;] Enable this in the Docker deamon (probably requires restart of deamon) #This didn\u0026rsquo;t work really, but maybe? Maybe I didn\u0026rsquo;t do it properly. Didn\u0026rsquo;t work for me, though.\nâœ— sudo cat \u0026lt;\u0026lt; EOF \u0026gt; /etc/docker/daemon.json { \u0026#34;insecure-registries\u0026#34;: [\u0026#34;localhost:5001\u0026#34;] } Set network connection with Docker #This should have been done in the script from Kind, but it was suggested as a solution.\ndocker network connect kind kind-registry Completely recreate a deployment #âœ— k delete deployment my-api -n my-api âœ— flux reconcile kustomization flux-system --with-source Resources # https://kind.sigs.k8s.io/docs/user/local-registry/ https://hackernoon.com/kubernetes-cluster-setup-with-a-local-registry-and-ingress-in-docker-using-kind https://stackoverflow.com/a/3175054 ","date":null,"permalink":"/posts/kubernetes/","section":"Blog posts","summary":"A step-by-step guide for setting up Flux in a Kind cluster with a local registry for automatic updates of Docker images.","title":"Flux with Local Registry"},{"content":"","date":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories"}]